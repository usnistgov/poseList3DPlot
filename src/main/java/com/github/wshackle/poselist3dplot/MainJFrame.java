/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.github.wshackle.poselist3dplot;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.filechooser.FileNameExtensionFilter;
import rcs.posemath.PmPose;
import rcs.posemath.PmRpy;

/**
 *
 * @author Will Shackleford {@literal <william.shackleford@nist.gov>}
 */
public class MainJFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        initComponents();
    }

    public static MainJFrame showPoseList(final List<? extends PmPose> l) {

        final MainJFrame mjf = new MainJFrame();
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                mjf.addTrack(toTrack(l));
                mjf.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                mjf.setVisible(true);
            }
        });
        return mjf;
    }

    public static Track toTrack(List<? extends PmPose> l) {
        Track track = new Track();
        track.setData(new ArrayList<TrackPoint>());
        List<TrackPoint> data = track.getData();
        for (PmPose pose : l) {
            TrackPoint tp = new TrackPoint();
            tp.x = pose.tran.x;
            tp.y = pose.tran.y;
            tp.z = pose.tran.z;
            data.add(tp);
        }
        return track;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        view3DPlotJPanel1 = new com.github.wshackle.poselist3dplot.View3DPlotJPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItemClearAll = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        FormListener formListener = new FormListener();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jMenu1.setText("File");

        jMenuItem1.setText("Open ...");
        jMenuItem1.addActionListener(formListener);
        jMenu1.add(jMenuItem1);

        jMenuItemClearAll.setText("Clear All");
        jMenuItemClearAll.addActionListener(formListener);
        jMenu1.add(jMenuItemClearAll);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(view3DPlotJPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(view3DPlotJPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == jMenuItem1) {
                MainJFrame.this.jMenuItem1ActionPerformed(evt);
            }
            else if (evt.getSource() == jMenuItemClearAll) {
                MainJFrame.this.jMenuItemClearAllActionPerformed(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    public Track readTrack(CsvParseOptions options, File f) {
        Track track = new Track();
        track.setData(new ArrayList<TrackPoint>());
        try (BufferedReader br = new BufferedReader(new FileReader(f))) {
            // ignore header 
            br.readLine();
            String line = null;
            while (null != (line = br.readLine())) {
                String tok[] = line.split(options.delim);
                TrackPoint tp = new TrackPoint();
                if (options.X_INDEX >= 0 && options.X_INDEX < tok.length) {
                    tp.x = options.DISTANCE_SCALE * Double.valueOf(tok[options.X_INDEX]);
                }
                if (options.Y_INDEX >= 0 && options.Y_INDEX < tok.length) {
                    tp.y = options.DISTANCE_SCALE * Double.valueOf(tok[options.Y_INDEX]);
                }
                if (options.Z_INDEX >= 0 && options.Z_INDEX < tok.length) {
                    tp.z = options.DISTANCE_SCALE * Double.valueOf(tok[options.Z_INDEX]);
                }
                if (options.ROLL_INDEX >= 0 && options.ROLL_INDEX < tok.length) {
                    tp.setRoll(Math.toRadians(Double.valueOf(tok[options.ROLL_INDEX])));
                }
                if (options.PITCH_INDEX >= 0 && options.PITCH_INDEX < tok.length) {
                    tp.setPitch(Math.toRadians(Double.valueOf(tok[options.PITCH_INDEX])));
                }
                if (options.YAW_INDEX >= 0 && options.YAW_INDEX < tok.length) {
                    tp.setYaw(Math.toRadians(Double.valueOf(tok[options.YAW_INDEX])));
                }
                track.getData().add(tp);
            }

        } catch (IOException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return track;
    }

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Comma-Separated-Values", "csv");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                final File f = chooser.getSelectedFile();
                openCsvFile(f);
            } catch (Exception ex) {
                Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    public void openCsvFile(final File f) {
        CsvParseOptions csvParseOptions = CsvParseOptionsJPanel.showDialog(this, f);
//                List<PM_POSE> l = Posemath.csvToPoseListF(chooser.getSelectedFile(),
//                        csvParseOptions.X_INDEX,
//                        csvParseOptions.Y_INDEX,
//                        csvParseOptions.Z_INDEX,
//                        -1, -1, -1);
        Track track = this.readTrack(csvParseOptions, f);
        addTrack(track);
    }

    public void addTrack(Track track) {
        List<List<Track>> tracksList = this.view3DPlotJPanel1.getTracksList();
        if (null == tracksList) {
            tracksList = new ArrayList<>();
        }
        List<Track> trackList = tracksList.size() > 0 ? tracksList.get(0) : null;
        if (null == trackList) {
            trackList = new ArrayList<>();
            tracksList.add(trackList);
        }
        List<TrackPoint> data = track.getData();
//                for (PM_POSE p : l) {
//                    TrackPoint tp = new TrackPoint();
//                    tp.x = p.tran.x;
//                    tp.y = p.tran.y;
//                    tp.z = p.tran.z;
//                    data.add(tp);
//                }
//                track.setData(data);
        if(null == data || data.size() < 1) {
            return;
        }
        track.currentPoint = data.get(data.size() - 1);
        track.cur_time_index = data.size() - 1;
        trackList.add(track);
        this.view3DPlotJPanel1.setTracksList(tracksList);
    }

    private void jMenuItemClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemClearAllActionPerformed
       List<List<Track>> tracksList = this.view3DPlotJPanel1.getTracksList();
       if(null == tracksList) {
            tracksList.clear();
       }
       this.view3DPlotJPanel1.setTracksList(null);
       
    }//GEN-LAST:event_jMenuItemClearAllActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(final String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainJFrame mjf = new MainJFrame();
                mjf.setVisible(true);
                for (String arg : args) {
                    try {
                        File f = new File(arg);
                        mjf.openCsvFile(f);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItemClearAll;
    private com.github.wshackle.poselist3dplot.View3DPlotJPanel view3DPlotJPanel1;
    // End of variables declaration//GEN-END:variables
}
